#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 2.5
#______CODING BY: ùë®ùë≥ùë¨ùëøùë®ùëµùë´ùë¨ùëπ
#______GITHUB : https://github.com/ùë®ùë≥ùë¨ùëøùë®ùëµùë´ùë¨ùëπùë≤ùë¨ùëµùë∑ùë∂ùëÆùë∞
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b''))